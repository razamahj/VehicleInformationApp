@page "/vehicle-info"
@inject VehicleInfoApp.Services.VehicleService VehicleService
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using Microsoft.JSInterop

<h3>Vehicle Information</h3>

<div>
    <label for="registrationNumber">Enter Registration Number:</label>
    <input type="text" @bind="registrationNumber" id="registrationNumber" />
    <button @onclick="GetVehicleInfo" disabled="@isLoading">Submit</button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-message">
        @errorMessage
    </div>
}

@if (isLoading)
{
    <div class="loading-indicator">
        Loading...
    </div>
}

@if (vehicleInfo != null)
{
    <div>
        <p><strong>Make:</strong> @vehicleInfo.Make</p>
        <p><strong>Model:</strong> @vehicleInfo.Model</p>
        <p><strong>Colour:</strong> @vehicleInfo.Colour</p>
        <p><strong>MOT Expiry Date:</strong> @vehicleInfo.MotExpiryDate</p>
        <p><strong>Mileage at Last MOT:</strong> @vehicleInfo.MileageAtLastMot</p>
    </div>
}

@code {
    private string registrationNumber;
    private VehicleInfoApp.Services.VehicleInfo vehicleInfo;
    private string errorMessage;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        // Check if data is available in local storage
        var cachedDataJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "cachedVehicleInfo");
        if (!string.IsNullOrEmpty(cachedDataJson))
        {
            vehicleInfo = JsonSerializer.Deserialize<VehicleInfoApp.Services.VehicleInfo>(cachedDataJson);
        }
    }

    private async Task GetVehicleInfo()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(registrationNumber) || registrationNumber.Length != 7)
            {
                errorMessage = "Please enter a valid 7-character registration number.";
                return;
            }

            errorMessage = null;
            isLoading = true;

            // Fetch vehicle info
            vehicleInfo = await VehicleService.GetVehicleInfo(registrationNumber);

            // Store fetched data in local storage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "cachedVehicleInfo", JsonSerializer.Serialize(vehicleInfo));
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Failed to fetch vehicle information. Please check your internet connection and try again.";
        }
        catch (ApiException ex)
        {
            errorMessage = $"An error occurred while fetching vehicle information: {ex.Message}";
        }
    }
    }